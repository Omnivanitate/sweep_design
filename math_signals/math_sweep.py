from typing import Any, Union

import numpy as np

from math_signals.math_relation import Relation
from math_signals.math_signal import Signal
import math_signals.defaults.sweep_methods as dfsm

class Sweep(Signal):
    '''Класс Sweep (изминить название) описывает какой-либо свип сигнал.

    Класс для аналазиа изменений сигнала во времении. Наследует класс Signal.

    Для анализа можно использовать не только свип сигнл, но и другие сигналы, 
    для которых трубется расмотрение спетрограмы, и возможного дальнейшего 
    сранения со свип-сигналом (Например, сигналы groundforce). 

    Если по переданным параметрам не получается извелчь данные свип-сигнала и
    возникнет ошибка, то будет выполнена попытка создание экземпляра класса 
    UncalculatedSweep с последующим пустым вызовм для создания экземпляра класса
    Sweep. 

    При создании экземпляра класса расчитывется спетрограмма.
    Если были переданы функции изменея частоты от веремени и амплитуды от времени, 
    они также расчитываются. Если не преданы, то их потом можно расчитать, 
    используя преобразвоание Гильберта (Но результат может быть не корректен).
    
    Для расчета спектрограммы применяется 

    Выполнются теже оперрации что и для и наследуемого класса. 

    Параметры:
        t: Any
            None, или объект Relation, или наследумый от него объект, или
            сущность, из которой будет извелечен объект array_like 
            (или извленчены объекты array_like), 
            содержащий(ие) только числа (простые и(или) комплексные).
        A: Any
            None или сущность, из которого будет извелечен объект 
            array_like, содержащий только числа (простые и(или) 
            комплексные).
        
        sweep_name: str or None
            Имя свип сигнала.
        
        category: str
            Категория свип сигнала.
        
        f_t: Any
            None, или объект Relation, или наследумый от него объект, или
            сущность, из которой будет извелечен объект array_like 
            (или извленчены объекты array_like), 
            содержащий(ие) только числа (простые и(или) комплексные) или
            вызываемы объект (функция изменения частоты от времени).

            Данный параметр, описывающий отношение изменения частоты и времени, 
            может быть или array_like, или объектом, 
            из которого будет создан экземпляр калсса Relation, 
            или экземпляр класса Relation,
            или вызываемы объект, возращающий числовую последовательность, или None.
        a_t: Any
            None, или объект Relation, или наследумый от него объект, или
            сущность, из которой будет извелечен объект array_like 
            (или извленчены объекты array_like), 
            содержащий(ие) только числа (простые и(или) комплексные) или
            вызываемы объект (функция изменения амплитуды от времени).
            
            Данный параметр, описывающий изменения амплитудной модуляции от 
            времени, может быть или array_like, или объектом, из которого будет
            создан экземпляр калсса Relation, или экземпляр класса Relation,
            или вызываемы объект, возращающий числовую последовательность.

        aprior_data: Any
            None, или объект Relation, или наследумый от него объект, или
            сущность, из которой будет извелечен объект array_like 
            (или извленчены объекты array_like), 
            содержащий(ие) только числа (простые и(или) комплексные) или
            функция изменения амплитуды от времени

        x_start: float
            Начало отсчета для априорного сигнала. 
        x_end: float
            Конец отсчета для париорного сигнала.
        
        f_a_t_method: Callable
            Вызываемый объект, по которому из априорного сигнала будут 
            расчитаны функция изменений частоты от времени, 
            функция изменения амплитуды от времени.

        sweep_name: str
            Название свип сигнла.

        f_t_name: str
            Название функции изменения частоты от времени.

        a_t_name: str
            Название функции изменения амплитуды от времени.
    
    Определены несколько дескрипторов (DefaultMethod) методов для 
    вычислений по умолчанию:
        spectrogram_method_default
            input:
                x: np.ndarray - время t
                y: np.ndarry - амплитуда А
            output:
                Spectrogram
            метод по которому будет рассчитана спектрограмма.
        
    '''
    spectrogram_method_default = staticmethod(dfsm.get_spectrogram)
    
    def __init__(self, t: Union[Relation, np.ndarray], 
                    A: np.ndarray = None, 
                    f_t: Relation = None, a_t: Relation = None,
                    aprior_signal: Signal = None, **kwargs) -> None:
 
        super().__init__(t, A)
        
        self.f_t = f_t if f_t is not None else dfsm.get_f_t(self._x, self._y)
        self.a_t = a_t if a_t is not None else dfsm.get_a_t(self._x, self._y)
            
        self.spectrogram = self.spectrogram_method_default()(self._x, self._y)
        self.aprior_signal = aprior_signal
    
